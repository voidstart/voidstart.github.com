---
layout: post
title: "RoR Day 25"
date: 2013-12-09 22:40
comments: true
categories: 
---

Towards understanding of the routes
=

Let me layout the gist of routing:

User browser side:
-
* Request: `HTTP_METHOD` + `URL`
* `HTTP_METHOD`: One  of `GET`, `POST`, `DELETE`, `PUT`
* `URL`: Something like `/products/17`

Server side:
-
* Needs to decide: Controller, Action, and Params

Example:  `/products/17`
-
* "products" :-> Controller
* "17" :-> :id (of  Params)
* Now what's the _Action_ ? (Method to call)
Answer: Depends on _HTTP_METHOD_ , which is not part of URL, but part of
the underlying communication from browser. ex. GET -> Show (Quite obvious)


Helpers:
-
In Rails code, both `URL` and `HTTP_METHOD` for the generated link can be constructed
in some kind of wrapper method like `product_path(1)`. This is part of Rails [evolution history](http://stackoverflow.com/questions/1548009/rails-link-to-routes-and-nested-resources).

What's troubling me is it's fair enough to understand the explict way of just write out the URL,
but sometimes confusing to figure out what exactly some helper would generate.

Take an example with:

``` erb
<%= button_to "Add to Cart", cart_items_path(product_id: product) %>
```

`button_to` has default http method of `POST`. We look up in the table from the [Rails guide](http://guides.rubyonrails.org/routing.html):

![Resources Routing Table](/images/post_method.png)

Which is exactly it's supposed to do: create a new cart_item. The params are encoded in the URL:

``` html Generated HTML Code
<form action="/cart_items?product_id=4" class="button_to" method="post">
	<div><input type="submit" value="Add to Cart" />
		<input name="authenticity_token" type="hidden" value="Rma+tW6nGyfn75bc3uwAi8BexhkkcsN1vl88altL6HA=" />
	</div>
</form>
```
