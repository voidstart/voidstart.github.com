<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wang Wei's Cup of Coffee]]></title>
  <link href="http://voidstart.github.io/atom.xml" rel="self"/>
  <link href="http://voidstart.github.io/"/>
  <updated>2013-12-09T23:05:12+08:00</updated>
  <id>http://voidstart.github.io/</id>
  <author>
    <name><![CDATA[Wang Wei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RoR Day 25]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/09/ror-day-25/"/>
    <updated>2013-12-09T22:40:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/09/ror-day-25</id>
    <content type="html"><![CDATA[<h1>Towards understandng of the routes</h1>

<p>Let me layout the gist of routing:</p>

<p>User browser side:</p>

<pre><code>Request: HTTP_METHOD + URL
HTTP_METHOD: One  of GET, POST, DELETE, PUT
URL: Something like /products/17
</code></pre>

<p>Server side:</p>

<pre><code>Needs to decide: Controller, Action, and Params
</code></pre>

<p>Example:  /products/17</p>

<pre><code>"products" :-&gt; Controller
"17" :-&gt; :id (of  Params)
Now what's the _Action_ ? (Method to call)
Answer: Depends on _HTTP_METHOD_ , which is not part of URL, but part of
    the underlying communication from browser. ex. GET -&gt; Show (Quite obvious)
</code></pre>

<p>Helpers:</p>

<pre><code>In Rails code, both URL and HTTP_METHOD for the generated link can be constructed
in some kind of wrapper method like `product_path(1)`. This is part of Rails evolution [history](http://stackoverflow.com/questions/1548009/rails-link-to-routes-and-nested-resources).
</code></pre>

<p>What&rsquo;s troubling me is it&rsquo;s fair enough to understand the explict way of just write out the URL,
but sometimes confusing to figure out what exactly some helper would generate.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 24]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/08/ror-day-24/"/>
    <updated>2013-12-08T21:59:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/08/ror-day-24</id>
    <content type="html"><![CDATA[<p>Turns out the <em>view</em> alone is a totally new world. I guess this is
what they call a <em>front end</em> ? CSS is a language more or less similar
to XML, which is structured, nested, element/attribute oriented language.</p>

<p>It&rsquo;s declarative. This makes a difference. Programming in declarative needs
an understanding of the <em>engine</em> that&rsquo;s behind the interpretation of such
rules. However, I don&rsquo;t have to step-by-step simulate a running program.
All I have to do, is just start with a blank paper, and <em>add</em> the <em>effects</em>
of those elements and attributes under the rules. The good thing about this
kind of system is it&rsquo;s constructed by superposition, like linear systems.
While imperative programming is more about states and transition in time,
the reasoning is harder and more delicate.</p>

<p>Learning CSS elements and properties certainly take time. However,
to have some sense of design and imagine a <em>target</em> to draw is a skill
of another level. Perhaps I should just be satisfied at the moment
for some basic tricks like positions, fonts, and just dividing the page
into some blocks of areas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 23]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/07/ror-day-23/"/>
    <updated>2013-12-07T16:11:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/07/ror-day-23</id>
    <content type="html"><![CDATA[<p>The correct way to handle <code>ForbiddenAttribute</code> issue : <a href="http://stackoverflow.com/questions/17371334/how-is-attr-accessible-used-in-rails-4">Put in controller</a>. Actually Rails 4 already
automatically generate code which is a private method to <code>permit</code> the paramters of assignment.</p>

<p>After setting the <code>permit</code> method, things are working now.</p>

<figure class='code'><figcaption><span>Generated code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">private</span>
</span><span class='line'><span class="c1"># Use callbacks to share common setup or constraints between actions.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">set_product</span>
</span><span class='line'>  <span class="vi">@product</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Never trust parameters from the scary internet, only allow the white list through.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">product_params</span>
</span><span class='line'>  <span class="n">params</span><span class="o">[</span><span class="ss">:product</span><span class="o">].</span><span class="n">permit</span><span class="p">(</span><span class="ss">:price</span><span class="p">,</span><span class="ss">:imgurl</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next I modified the view of the products index a bit with a bit of plain HTML table. It&rsquo;s not &ldquo;fancy&rdquo; as Depot, but functional enough for me.</p>

<p>Then I want the home page to show the products index, modified the route and
it&rsquo;s a small change. At least now I know where to look for the changes when I want to do something.
The comments in those generated files are helpful.</p>

<p>Now I&rsquo;d like the <em>sidebar</em>, which I know got to do with <em>layout</em>. Then I faced the problem of writing
css, which I basically still knows nothing about. Refer to the scss of Depot, I found out about the
<code>float</code> attribute, which probably makes the left/right split to panes.</p>

<p>There&rsquo;s a great <a href="http://www.jaceju.net/blog/archives/18/">article</a> on this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bitcoin - 1]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/07/bitcoin-1/"/>
    <updated>2013-12-07T09:47:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/07/bitcoin-1</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been observing Bitcoin and read about it for some time now.
I think I&rsquo;ll just give it some of my opinions.</p>

<p>Recently Bitcoin has risen from a niche toy ( when you could buy a pizza for 10,000 BTC ), to
the all time high of over 1000 USD per BTC. It entered pubic sight and caught the attention of
governments. There are many stories to tell, let me just layout the ones I think are significant
and worth some thinking:</p>

<ul>
<li>some consider BTC one of <a href="http://www.garynorth.com/public/11828.cfm">Ponzi scheme</a></li>
<li>there are BTC-backed organized crimial black market for drugs, guns etc.</li>
<li>BTC are used for cross-border money transfer with low transaction fees</li>
<li>BTC are used as marketing stunts ( some real estate even sold for BTC )</li>
<li>BTC has their own exchanges like a stock market</li>
<li>BTC are said to have risk of being used for money laundering</li>
<li>BTC heists. Virtually impossible to trace.</li>
<li>there is a whole small industry to <em>print</em> the money of BTC (mining hardware,software)</li>
<li>Finally, BTC are considered currency of the future</li>
</ul>


<p>Just 2 days ago, the central bank of China issued some <a href="http://www.pbc.gov.cn/publish/goutongjiaoliu/524/2013/20131205153156832222251/20131205153156832222251_.html">notice</a> ( essentically government policies ) to
ban the use of BTC by any banks or financial instituations, or any commercial payments.
The price of BTC dropped significantly following the news.</p>

<p>My opinions can be expressed by my predictions of the future of Bitcoin:</p>

<ul>
<li>Bitcoin ( or its variant ) <em>will</em> survive, because it&rsquo;s a credit system that offers unique features:
anonymity. It&rsquo;s perfect for criminal activities and other secret merchant activities. For this single
reason, it can survive for as long as there&rsquo;s a demand for such a credit system. Sad, but unavoidable.</li>
<li>For BTC to have <em>value</em>, it has to be backed by <em>real money</em> that are exchangable to general society
economic merchandises. Currently it has been the BTC exchanges, which are filled with speculators.
What <em>I predict will</em> appear is something like a BTC bank, that an organization will <em>offcially back</em> the BTC similar to the repayability of dollar ( once in history USD are exchangable to gold ). Such bank, whether above ground or underground, will show up simply because it&rsquo;s profitable and sustainable from collecting transaction fees. Imagine such <em>bank</em> gurentees 1 USD to 1 BTC repayment at any time, if such bank can be trusted enough, BTC essentically become USD with added property of anomymity. By BTC&rsquo;s current limit of 21 million, this will be 21 million of this speical kind of USD.</li>
<li>Speculators could keep the price of BTC at high level, if they allow their money to be freezed in the form of BTC. However, the game will eventually become in equilibrium, the number of speculators and
speculator money will cease to increase, and some people inevitably would like to withdraw their money to do something else. The over-evaluation period will end, the price will drop to a level that is
suitable to the demand of the said above use: demand for anonymous money for dark activities.</li>
</ul>


<p>I could even provide a wild guess for the lower bound of BTC price. Since the dark market&rsquo;s global
scale is at least in the billions USD range. Let&rsquo;s give an absurd value of 1 Billion usage of BTC
as the means of trade. 1,000,000,000 / 21,000,000 = 47.6 USD.</p>

<p>Conclusion: BTC under 47.6$ will be a buy.</p>

<p>Disclaimer: Don&rsquo;t take this seriously. Pure speculation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming -1]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/06/functional-programming-1/"/>
    <updated>2013-12-06T21:59:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/06/functional-programming-1</id>
    <content type="html"><![CDATA[<p>Today I spent some time watching an hour-long <a href="http://www.youtube.com/watch?v=ZhuHCtR3xq8&amp;feature=share">video</a> about <em>Functional Programming</em>.</p>

<p>It made two significant points that struck me:</p>

<ul>
<li>types are just mathematical sets</li>
<li>functions can be thought just like mathematical functions mapping set A to set B ( input type and return type )</li>
</ul>


<p>When thinking like this, I all of sudden get a hint of what a <em>type system</em> actually
might be like. Although this talk is primarily to layout the work for <em>monads</em>, it
really helps understanding programming from a different perspective than imperative.</p>

<p>It&rsquo;s about one input and one output, but multiple input can be tricked to use <em>currying</em>
to simulate ( or compose ). That has a lot of potential in reasoning about programs.</p>

<p>Other aspects regarding philosophy also are quite remarkable:</p>

<ul>
<li>The word <em>simple</em> is ambiguous. It can be &ldquo;more explict, more obvious&rdquo; by some, but
&ldquo;more implict, more abstract&rdquo; by others. The word <em>small</em> however, always implies <em>simple</em> but without
the controversy.</li>
<li><em>Composability</em> is <em>the</em> way to manage complexcity, or build one. This makes sense.
Random stiched up things are scary and unmaintable. In his words, we spent to much time not
productive, but just stiching tings up.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 22]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/06/ror-day-22/"/>
    <updated>2013-12-06T14:39:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/06/ror-day-22</id>
    <content type="html"><![CDATA[<p>Learning without understanding doesn&rsquo;t last in memory. Just I tried to
do something simple as add a few columns and update their values on my own.
I got into the error of &ldquo;Forbidden attributes&rdquo;. It appears to be related
to <a href="http://blog.xdite.net/posts/2012/03/05/github-hacked-rails-security/">mass assignment problem</a>.</p>

<p>The thing with understanding such a problem, is that the level of abstraction
is a bit high. To think <em>natively</em> on this, what exactly doesn&rsquo;t work?</p>

<p>A http request doesn&rsquo;t trigger what it suppose to do, instead it returns a page generated
by Rails displaying the <em>error trace</em>. To a stranger with reasonable intelligence, this is like
non-sense. Leave me with either <em>Google it</em> or search for a clue in my mind. If I then
start to read the source codes of the trace, it will be overwhelming information, which 99% I don&rsquo;t
care for the problem at hand. My mind has some vague clue that this probably has something to do
with <em>Edit</em> &ldquo;action&rdquo; of &ldquo;product&rdquo; ActiveRecord, which involves model,database,controller, if more
unlikely web server request/response, or other parts of Rails.</p>

<p>Google is a helpful friend here, directing me to suspect the &ldquo;mass assignment&rdquo; problem that once
in history got Github hacked. It has been a while, so modern Rails probably adapted and make
security <a href="http://net.tutsplus.com/tutorials/ruby/mass-assignment-rails-and-you/">precautions</a> that by default bans certain <code>update</code> function, causing this error.
One of the link suggusts DHH has some Gist to <a href="https://gist.github.com/dhh/1975644">demo</a> a way of resolution.</p>

<p>I&rsquo;m still making sense of all this. In the meantime, I continue to play with building the small
book store app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 21]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/05/ror-day-21/"/>
    <updated>2013-12-05T15:33:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/05/ror-day-21</id>
    <content type="html"><![CDATA[<p>Quite accidently, it&rsquo;s been 21 days and I finished first reading of the Agile Rails book.
Learn Rails in 21 days.. Well, not quite.</p>

<p>It&rsquo;s usable and refreshing in many aspects, but far from masterery. If this were bicycle,
I&rsquo;d be just able to make one meter without putting foot on the ground. You know the
skills are just that many, but need more excercise to burn into the brain.</p>

<p>So far I can remeber to do scaffold generation and db:migrate, sometimes just not sure
when to use <code>rails</code> when to use <code>rake</code>. To add a new column, a new migration ( some kind of
script ) has to be written and run and tracked. In <code>def change</code>, the syntax for new column
is not obvious to the mind, had to look it up.</p>

<p>The devil&rsquo;s in the details. The plan is bascially correct.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithm Design Manual - 2]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/04/algorithm-design-manual-2/"/>
    <updated>2013-12-04T22:51:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/04/algorithm-design-manual-2</id>
    <content type="html"><![CDATA[<p>I thought I&rsquo;d just start to warm up myself by writing some sorting
algorithm.</p>

<p>At first, I thought to first write some random generator for testing usage. Then
I realized that&rsquo;s not the goal, to compare each algo with different types of inputs.
I am just trying to implement <em>correct</em> sorting. The performance, code compactness,
caching all are not my concerns. So the result is hardcoded <em>random</em> input, and I
will print the whole array after each <em>pass</em> or interation (after swap etc), to
observe the <em>sorting process</em> and final sorted array.</p>

<p>I did from scatch the bubble, insertion, selection and merge sort. Turns out it&rsquo;s
not easy to get right the first try even for such simple algorithm. My errors mostly
on index off by 1, edge cases. Time spent mostly on thinking the <em>sorted</em> vs the <em>unsorted</em> part,
and their transition. Direction, index, temps are most concerned.</p>

<p>It&rsquo;s good excercise.</p>

<p>I review some other things besides this:</p>

<ul>
<li>the spiral rule of c++ declaraions</li>
<li>c++ quiz quesions (includes some c++ 11 stuff)</li>
<li>stack and queues</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 20]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/04/ror-day-20/"/>
    <updated>2013-12-04T21:40:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/04/ror-day-20</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>CreditCard Processor Gem (ActiveMerchant)</li>
<li>Haml ( Yet another compressed syntax like Sass )</li>
<li>More Plugins</li>
<li>Page 457/476 (96.0%) &ndash;> End of All Readings</li>
</ul>


<h1>&ldquo;Syntax Compression&rdquo;</h1>

<p>Replace a long &ldquo;class=..&rdquo; with &ldquo;.&rdquo; is clearly easier to type.
Less verbose, but semantically the same. What&rsquo;s changed is the
syntax, or could say <em>compressed</em>.</p>

<p>The more often used stuff are compressed to shorter things like just
a single char. It&rsquo;s mathematically obvious that encodings like this save
more space/typing.</p>

<p>Just like in algebra, complex variables are represented by just a Greek letter.
It makes writing, reading, reasoning all the easier.</p>

<p>It&rsquo;s for humans, the hands and the brains.</p>

<h1>&ldquo;Funny names&rdquo;</h1>

<p>Cucumber, Rspec, webrat.. It&rsquo;s definitely just 0s and 1s and nothing special.
I think the <em>branding</em> is to create identity, to advertise, to make an impression,
to humans, ultimately.</p>

<p>Serves similar to <em>syntax compression</em>, it taps to how human brain works, related
to cognative science, neuro science and phycology. One of the ways for gamblers to
remember cards is to associate each card with a unique object like a flag, a tree etc.
It&rsquo;s the common memorization techniques.</p>

<p>We could go futher to create deeper associations. One example is, to remember several
random objects, one imagine a room he&rsquo;s in and <em>put</em> the random things to certain
locations in the room, as one <em>virtually</em> walking inside it. This creates connections
to things with one&rsquo;s sense of space ( room places ) and time ( walking ).</p>

<p>Maybe next time I&rsquo;ll name some Gem this way, when I write my own gems.</p>

<h1>&ldquo;Voila&rdquo;</h1>

<p>It&rsquo;s the end of first time reading this book. A lot is learned, a lot is made sense of,
still a lot is missing the connection.</p>

<p>Next up, I&rsquo;ll try to redo the app on my own, <em>without</em> following the steps, to refresh the
memory and understanding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithm Design Manual - 1]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/03/algorithm-design-manual-1/"/>
    <updated>2013-12-03T14:23:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/03/algorithm-design-manual-1</id>
    <content type="html"><![CDATA[<p>Today I started review algorithms with <a href="http://amzn.com/0387948600?tag=a200-20">The Algorithm Design Manual</a>,
recommended by <a href="http://codingforinterviews.com/books">Coding for interviews</a>.</p>

<p>Not going to follow the step-by-step <em>&ldquo;enjoy the show&rdquo;</em> approach as <a href="http://pragprog.com/book/rails32/agile-web-development-with-rails-3-2">the agile Rails book</a>.
I&rsquo;ll start with selected chapters/sections, and go to basics when in doubt.</p>

<p>Currently I have several things for starter:</p>

<ul>
<li>Sorting</li>
<li>Data structures of array/list/dict/queue</li>
<li>Logorithms in Complexity Analysis</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 19]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/03/ror-day-19/"/>
    <updated>2013-12-03T14:22:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/03/ror-day-19</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Migrations ( Table, Index, Keys )</li>
<li>Standalone scripts ( Extension to Ruby, use of Active Support )</li>
<li>Gem, Gemfile, Bundle</li>
<li>Rack</li>
<li>Page 441/476 (92.6%)</li>
</ul>


<h1>&ldquo;Value of the Standalone&rdquo;</h1>

<p>It&rsquo;ll be wonderful if the table legs are not just for the table, but
can be useful as something else. It&rsquo;ll be wonderful if those legs
can be easily plug-out and put into another furniture as a useful component.
Rails&#8217; active support, active records are very useful to help build other things.</p>

<p>Standalone implies decoupling, compartmentalized, component-oriented.
It usually means there&rsquo;s less to worry about, and only one interaction is to be concerned.
The Rails Agile Book talks about <em>nonbrowser</em> application, sugguesting no browser is involved
in interaction. This makes several important components irrelevant (views, layouts), but the model
is still to be interacted with.</p>

<p>Scriptability is a sweet candy. It feels great to <em>tap</em> into the <em>runtime</em> of an app.
<code>rails console</code> is like a console from games such as Quake and Counter-Strike.
The console offers examination and modification at <em>runtime</em>. What&rsquo;s more, Rails offers
web-service like API that are scriptable (JSON, XML interfaces), with similar human experience to local
development. The book describes this similarity as <em>magic</em>.</p>

<p>Dependencies versioning. What Gemfile does is both simple and powerful. What make it look better than
other systems are:</p>

<ul>
<li>Semantic versioning</li>
<li>Uniformity</li>
</ul>


<p>Rack is like yet another proxy/agent/adapter/.. (whatever people feel like to call such things), but for
integration with web-servers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 18]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/02/ror-day-18/"/>
    <updated>2013-12-02T17:43:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/02/ror-day-18</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>render(), Action View</li>
<li>Caching page,action,segment</li>
<li>Migration</li>
<li>Page 407/476 (85.5%)</li>
</ul>


<h1>&ldquo;Cache and State&rdquo;</h1>

<p>Cache is in pinciple just a faster copy of something else.
Yet the simplicity of its surface does not warrant it&rsquo;s simple
underneath. Caching is one of <em>the</em> hard problems in many systems.</p>

<p>When create cache, immediately worry about several things:
capacity, synchronicity, invalidation. Worse, cache systems tend to
<em>cascade</em> from level to level. CPU&rsquo;s have severl levels of caching.</p>

<p>Be fast, but definitely don&rsquo;t be wrong.
Trade space for speed, without sacrificing correctness.</p>

<p>Think of it as two worlds: the cached world, the <em>real</em> world.
In short: Use the cached world when it&rsquo;s a correct mirror, when
it&rsquo;s not, mirror first. How does it become un-mirrored/out of sync?
Either <em>real</em> world updated, or the cached world breaks (dropped cache
or non-existent).</p>

<p>Thinking this way helps understanding the whole point of cache systems.</p>

<h1>&ldquo;Partials&rdquo;</h1>

<p>Classic divide and conquer. Big worlds versus nested smaller worlds.</p>

<p>What partials do are analogous to functions, just for views. <em>Context</em> is what is passed into
the smaller worlds. With the <em>context</em>, some actions are performed, to either
produce a side-effect (like IO) or just prepare some data (returned value like string,
objects)</p>

<h1>&ldquo;Migration&rdquo;</h1>

<p>It&rsquo;s like Git log, but version controling the database.
 Keeping track of changes, that could be reverted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 17]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/01/ror-day-17/"/>
    <updated>2013-12-01T22:37:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/01/ror-day-17</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Finish review of the first half of the book</li>
<li>Dig more into Active Records</li>
<li>Dig deeper into Routes</li>
<li>Page 339/476 (71.2%)</li>
</ul>


<h1>&ldquo;Semantic naming&rdquo;</h1>

<p>Normally in languages, names are just symbols, identifiers, nothing much than
some random letters.</p>

<p>Here we have Rails, names have meanings. <code>find()</code>, <code>find_by_xxx()</code>, <code>find_all_by_xxx()</code>,
esencially it&rsquo;s embedded APIs in namings. I am not sure this is like meta-programming such
as C++ macros, it&rsquo;s more powerful and natural.<br/>
I think it at least has two advantages :</p>

<ul>
<li>Clean syntax. Less clutter like brackets, easy to read.</li>
<li>Natrual feeling. Reads more like English.</li>
</ul>


<p>A good idea for language design.</p>

<h1>&ldquo;SQL injection&rdquo;</h1>

<p>A rather <em>old</em> topic, yet still very relevent.</p>

<p>On the surface, this is about escaping syntax tricks. What&rsquo;s more fundamental is, the question
of what is data and what is code. Code and Data are represented by the same 1 and 0&rsquo;s and transferred
all the same. The point of interpretation, or execution, is critical for avoiding unintended (or
ill-intended) treating data as code. This is the root of all priviledge stealing in systems by design.</p>

<p>Of course hackers can still hack accounts and passwords by brute-force guessing or social means. But treating
data as code is <em>the</em> technical vulnerability to fight in all sorts of systems, be it SQL, shell codes, overflows etc.
The idea is to let the machine <em>run MY code</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 16]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/30/ror-day-16/"/>
    <updated>2013-11-30T23:28:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/30/ror-day-16</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Finish first review process</li>
<li>Dig deeper into Active Records</li>
<li>Page 294/476</li>
</ul>


<h1>&ldquo;DRY: Don&rsquo;t Repeat Yourself&rdquo;</h1>

<p>In a sense, the database table/row/column has much resonance with
the OO&rsquo;s class/object/attribute. The dimensions are very similiar.</p>

<p>This is repitition to the humans.However, to the machines and the different
systems, it&rsquo;s more like saying more or less the same thing in two
langauges. Translation is in order. But since this is defined so
formally in computer languages, can&rsquo;t that be easily translated by
machines themselves?</p>

<p>Well, Active Record is all about the automatic translations. There
are rules about names translation, and operations translations, defined
by humans. Once the rules are in place, the human repetitions can stop.
Naming things is hard, except when you can fixiate on some convention
predefined. Everybody just have to agree on the conventions.</p>

<p>We are like dealing with very intricate stuff in a small kingdom of computer
models and objects and databases and what have you. We can&rsquo;t keep
debating about the names of common things like streets and roads. That
has to be fixed to let us communicate effectively, so we can navigate
without losing the way.</p>

<p>Rails is such fixation. We express one thing, Rails knows the other.
There are exceptions when we want to keep things <em>irregular</em>, Rails allows
that can let us put our exceptions in the system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 15]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/29/ror-day-15/"/>
    <updated>2013-11-29T22:03:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/29/ror-day-15</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Review</li>
<li>Fix tests</li>
<li>Setup a production environment</li>
</ul>


<h1>&ldquo;Production&rdquo;</h1>

<p>Prototype and production are different. The gap may seem complex
but it really shouldn&rsquo;t be. The stuff makes a good prototype should
have good benefits on the production-type also. But then comes the
question of why the gap.</p>

<p>I&rsquo;ve talked about <a href="http://voidstart.com/blog/2013/11/25/ror-day-11/">Production Qualified</a> before,
about the differences in existence. Now I wonder why one system cannot take the upsides of both.</p>

<p>There really is no reason that a prototype shouldn&rsquo;t be stable and performant. The real problem
is simplicity. Production systems are complex, especially for large scale. It takes extra logic
to optimize/enhance for different situations, such as millions of concurrent users or bad 3G network.
Security risks are high, storage loads are high and data is much more important that can never be
lost. Logging is going to handle both the load and safisticated enough for deep analysis, even
for graphing and data mining purposes.</p>

<p>Why cannot all these be some kind of plugins that could be easily enabled by installation with
a package manager. If the structure is well thought of to enable such reliable extension, there
really should be no reason of why it can&rsquo;t be done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 14]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/28/ror-day-14/"/>
    <updated>2013-11-28T21:58:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/28/ror-day-14</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Practice the Playtime tasks</li>
<li>286/476</li>
</ul>


<h1>&ldquo;Playtime&rdquo;</h1>

<p>Following the book to write the app is straightforward, since everything
is detailed explained.</p>

<p>Playtime is the section without the answers explained, but only the questions given.
I had struggled with some of the questions for quite some time.</p>

<p>So far I have done all the playtime by myself and many of the errors I made are
caused by misunderstanding and carelessness. Through Googling and re-examining
the source codes, eventually the issue will settle.</p>

<p>The hard part about development is sometimes the error message just does not make
sense, you have to apply intuition, play and compare and ask good questions. This
is ultimately about the gap between computer and human, imagine if computer can
figure out all the underlying issues of why something does not work and print
the exact issue right in front of you. Everything is just like cooking recipe, even the error
printed, designed by human. The logic paths are thought first by a human, then coded
into recipes for the execution loop.</p>

<p>Perhaps I should look at machine learning courses for some inspirations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 13]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/27/ror-day-13/"/>
    <updated>2013-11-27T23:04:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/27/ror-day-13</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Continue Review</li>
<li>268/476</li>
</ul>


<h1>&ldquo;Ajax, Javascript, Css&rdquo;</h1>

<p>This is not something much about Ruby or Rails, just web dev
in general.</p>

<p>Ajax allows interaction without page reload. A request still happens
in the background, but only partical page is obtained. DOM tree largely
remains the same, but part of the tree got replaced.</p>

<p>Javascript is the language used to manipulate the DOM tree, and such
code sources need to be adaptive to content, too. Thus, we could again
use Ruby to generate JS code from templates, just like html pages.
We ends up with: use ruby to do js, use js to do html, use html to do page.
Just an amazing stack.</p>

<p>Css is the language to do styling via several things:</p>

<ul>
<li>Identify some elements in the DOM (via class, id)</li>
<li>Describe the style of that element (font,color,size,margin..)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 12]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/26/ror-day-12/"/>
    <updated>2013-11-26T20:46:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/26/ror-day-12</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Review what I have learn (Retrospective)</li>
<li>268/476</li>
</ul>


<h1>&ldquo;Retrospective&rdquo;</h1>

<p>In retrospect, there are several things that are quite fresh to me.</p>

<ul>
<li>MVC thinking</li>
<li>Template transformation ( erb &ndash;> html, js &hellip; )</li>
<li>Ruby block</li>
<li>Pervasive conventions over configuration</li>
<li>Request and State</li>
</ul>


<p>MVC makes the parts of the app easily separated, easy to find what
goes where and reason about.</p>

<p>Transformations from embedded ruby
to other sources are the bridge to generate web pages according to
states, including db and user interactions.</p>

<p>Ruby block shows first order functions, and provides a new way of
thinking about code and behavior. We can pass behaviors around and attach
to another behavior or data.</p>

<p>Conventions make a lot things easier. A lot of hard questions are not
about figuring out how to do, but just choose something, like naming
things and putting things somewhere. Conventions make those no brainers.</p>

<p>Request and state is particular for web development. The server and client
communicates by requests one at a time. To pass on the conversation across
requests, state must be maintained.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 11]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/25/ror-day-11/"/>
    <updated>2013-11-25T20:59:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/25/ror-day-11</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Deployment</li>
<li>264/476</li>
</ul>


<h1>&ldquo;Production qualified&rdquo;</h1>

<p>There seems to be always a need to make the testing
environment as simple as possible, for the benefit of quick looping
in experimentation. For real world, however, the priority has changed.
The performance becomes first order, and changes are slow.</p>

<p>The root reason being stability and speed. For any product, it is important to maintain the balance
between delivering a stable, dependenable expectations, and the need
for new functions.</p>

<p>Take it further, it&rsquo;s the difference of existing function and wanted function that matter. If the
need for new/better function outweighs the stability of existing ones, things need to go faster.</p>

<p>In Linux, there&rsquo;s the rule of never break the user&rsquo;s code, respect total backwards compatibility.
Only after years of obsoletion a supported feature could be deleted. Even so, such old products
could still go the history museums.</p>

<p>In today&rsquo;s fast-food world, it becomes rarity to be something that lasts decades. Standing the
test of time is such a beautiful property in modern times.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 10]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/24/ror-day-10/"/>
    <updated>2013-11-24T21:12:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/24/ror-day-10</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>I18N</li>
<li>244/476</li>
</ul>


<h1>&ldquo;Internationalization&rdquo;</h1>

<p>Essentially, every string is a fixed value that is
like enum. However, since texts are so easy to just
type out, people tend to just write them out, rather
than defining any enumeration.</p>

<p>Eventually the solution is to use something like tagging,
which is some function to return a translated version
based on locale.</p>

<p>This is kind of a unique case where a certain special
string literal markings can be useful. In C++ world, there&rsquo;s
a proposal for 2014 which adds physics units to the string
literal, enabling interpretations of physics units at the
compiler level. That could be a great inspiration for i18n.</p>
]]></content>
  </entry>
  
</feed>
