<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wang Wei's Cup of Coffee]]></title>
  <link href="http://voidstart.github.io/atom.xml" rel="self"/>
  <link href="http://voidstart.github.io/"/>
  <updated>2013-12-04T23:01:19+08:00</updated>
  <id>http://voidstart.github.io/</id>
  <author>
    <name><![CDATA[Wang Wei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Algorithm Design Manual - 2]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/04/algorithm-design-manual-2/"/>
    <updated>2013-12-04T22:51:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/04/algorithm-design-manual-2</id>
    <content type="html"><![CDATA[<p>I thought I&rsquo;d just start to warm up myself by writing some sorting
algorithm.</p>

<p>At first, I thought to first write some random generator for testing usage. Then
I realized that&rsquo;s not the goal, to compare each algo with different types of inputs.
I am just trying to implement <em>correct</em> sorting. The performance, code compactness,
caching all are not my concerns. So the result is hardcoded <em>random</em> input, and I
will print the whole array after each <em>pass</em> or interation (after swap etc), to
observe the <em>sorting process</em> and final sorted array.</p>

<p>I did from scatch the bubble, insertion, selection and merge sort. Turns out it&rsquo;s
not easy to get right the first try even for such simple algorithm. My errors mostly
on index off by 1, edge cases. Time spent mostly on thinking the <em>sorted</em> vs the <em>unsorted</em> part,
and their transition. Direction, index, temps are most concerned.</p>

<p>It&rsquo;s good excercise.</p>

<p>I review some other things besides this:</p>

<ul>
<li>the spiral rule of c++ declaraions</li>
<li>c++ quiz quesions (includes some c++ 11 stuff)</li>
<li>stack and queues</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 20]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/04/ror-day-20/"/>
    <updated>2013-12-04T21:40:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/04/ror-day-20</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>CreditCard Processor Gem (ActiveMerchant)</li>
<li>Haml ( Yet another compressed syntax like Sass )</li>
<li>More Plugins</li>
<li>Page 457/476 (96.0%) &ndash;> End of All Readings</li>
</ul>


<h1>&ldquo;Syntax Compression&rdquo;</h1>

<p>Replace a long &ldquo;class=..&rdquo; with &ldquo;.&rdquo; is clearly easier to type.
Less verbose, but semantically the same. What&rsquo;s changed is the
syntax, or could say <em>compressed</em>.</p>

<p>The more often used stuff are compressed to shorter things like just
a single char. It&rsquo;s mathematically obvious that encodings like this save
more space/typing.</p>

<p>Just like in algebra, complex variables are represented by just a Greek letter.
It makes writing, reading, reasoning all the easier.</p>

<p>It&rsquo;s for humans, the hands and the brains.</p>

<h1>&ldquo;Funny names&rdquo;</h1>

<p>Cucumber, Rspec, webrat.. It&rsquo;s definitely just 0s and 1s and nothing special.
I think the <em>branding</em> is to create identity, to advertise, to make an impression,
to humans, ultimately.</p>

<p>Serves similar to <em>syntax compression</em>, it taps to how human brain works, related
to cognative science, neuro science and phycology. One of the ways for gamblers to
remember cards is to associate each card with a unique object like a flag, a tree etc.
It&rsquo;s the common memorization techniques.</p>

<p>We could go futher to create deeper associations. One example is, to remember several
random objects, one imagine a room he&rsquo;s in and <em>put</em> the random things to certain
locations in the room, as one <em>virtually</em> walking inside it. This creates connections
to things with one&rsquo;s sense of space ( room places ) and time ( walking ).</p>

<p>Maybe next time I&rsquo;ll name some Gem this way, when I write my own gems.</p>

<h1>&ldquo;Voila&rdquo;</h1>

<p>It&rsquo;s the end of first time reading this book. A lot is learned, a lot is made sense of,
still a lot is missing the connection.</p>

<p>Next up, I&rsquo;ll try to redo the app on my own, <em>without</em> following the steps, to refresh the
memory and understanding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithm Design Manual - 1]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/03/algorithm-design-manual-1/"/>
    <updated>2013-12-03T14:23:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/03/algorithm-design-manual-1</id>
    <content type="html"><![CDATA[<p>Today I started review algorithms with <a href="http://amzn.com/0387948600?tag=a200-20">The Algorithm Design Manual</a>,
recommended by <a href="http://codingforinterviews.com/books">Coding for interviews</a>.</p>

<p>Not going to follow the step-by-step <em>&ldquo;enjoy the show&rdquo;</em> approach as <a href="http://pragprog.com/book/rails32/agile-web-development-with-rails-3-2">the agile Rails book</a>.
I&rsquo;ll start with selected chapters/sections, and go to basics when in doubt.</p>

<p>Currently I have several things for starter:</p>

<ul>
<li>Sorting</li>
<li>Data structures of array/list/dict/queue</li>
<li>Logorithms in Complexity Analysis</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 19]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/03/ror-day-19/"/>
    <updated>2013-12-03T14:22:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/03/ror-day-19</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Migrations ( Table, Index, Keys )</li>
<li>Standalone scripts ( Extension to Ruby, use of Active Support )</li>
<li>Gem, Gemfile, Bundle</li>
<li>Rack</li>
<li>Page 441/476 (92.6%)</li>
</ul>


<h1>&ldquo;Value of the Standalone&rdquo;</h1>

<p>It&rsquo;ll be wonderful if the table legs are not just for the table, but
can be useful as something else. It&rsquo;ll be wonderful if those legs
can be easily plug-out and put into another furniture as a useful component.
Rails&#8217; active support, active records are very useful to help build other things.</p>

<p>Standalone implies decoupling, compartmentalized, component-oriented.
It usually means there&rsquo;s less to worry about, and only one interaction is to be concerned.
The Rails Agile Book talks about <em>nonbrowser</em> application, sugguesting no browser is involved
in interaction. This makes several important components irrelevant (views, layouts), but the model
is still to be interacted with.</p>

<p>Scriptability is a sweet candy. It feels great to <em>tap</em> into the <em>runtime</em> of an app.
<code>rails console</code> is like a console from games such as Quake and Counter-Strike.
The console offers examination and modification at <em>runtime</em>. What&rsquo;s more, Rails offers
web-service like API that are scriptable (JSON, XML interfaces), with similar human experience to local
development. The book describes this similarity as <em>magic</em>.</p>

<p>Dependencies versioning. What Gemfile does is both simple and powerful. What make it look better than
other systems are:</p>

<ul>
<li>Semantic versioning</li>
<li>Uniformity</li>
</ul>


<p>Rack is like yet another proxy/agent/adapter/.. (whatever people feel like to call such things), but for
integration with web-servers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 18]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/02/ror-day-18/"/>
    <updated>2013-12-02T17:43:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/02/ror-day-18</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>render(), Action View</li>
<li>Caching page,action,segment</li>
<li>Migration</li>
<li>Page 407/476 (85.5%)</li>
</ul>


<h1>&ldquo;Cache and State&rdquo;</h1>

<p>Cache is in pinciple just a faster copy of something else.
Yet the simplicity of its surface does not warrant it&rsquo;s simple
underneath. Caching is one of <em>the</em> hard problems in many systems.</p>

<p>When create cache, immediately worry about several things:
capacity, synchronicity, invalidation. Worse, cache systems tend to
<em>cascade</em> from level to level. CPU&rsquo;s have severl levels of caching.</p>

<p>Be fast, but definitely don&rsquo;t be wrong.
Trade space for speed, without sacrificing correctness.</p>

<p>Think of it as two worlds: the cached world, the <em>real</em> world.
In short: Use the cached world when it&rsquo;s a correct mirror, when
it&rsquo;s not, mirror first. How does it become un-mirrored/out of sync?
Either <em>real</em> world updated, or the cached world breaks (dropped cache
or non-existent).</p>

<p>Thinking this way helps understanding the whole point of cache systems.</p>

<h1>&ldquo;Partials&rdquo;</h1>

<p>Classic divide and conquer. Big worlds versus nested smaller worlds.</p>

<p>What partials do are analogous to functions, just for views. <em>Context</em> is what is passed into
the smaller worlds. With the <em>context</em>, some actions are performed, to either
produce a side-effect (like IO) or just prepare some data (returned value like string,
objects)</p>

<h1>&ldquo;Migration&rdquo;</h1>

<p>It&rsquo;s like Git log, but version controling the database.
 Keeping track of changes, that could be reverted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 17]]></title>
    <link href="http://voidstart.github.io/blog/2013/12/01/ror-day-17/"/>
    <updated>2013-12-01T22:37:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/12/01/ror-day-17</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Finish review of the first half of the book</li>
<li>Dig more into Active Records</li>
<li>Dig deeper into Routes</li>
<li>Page 339/476 (71.2%)</li>
</ul>


<h1>&ldquo;Semantic naming&rdquo;</h1>

<p>Normally in languages, names are just symbols, identifiers, nothing much than
some random letters.</p>

<p>Here we have Rails, names have meanings. <code>find()</code>, <code>find_by_xxx()</code>, <code>find_all_by_xxx()</code>,
esencially it&rsquo;s embedded APIs in namings. I am not sure this is like meta-programming such
as C++ macros, it&rsquo;s more powerful and natural.<br/>
I think it at least has two advantages :</p>

<ul>
<li>Clean syntax. Less clutter like brackets, easy to read.</li>
<li>Natrual feeling. Reads more like English.</li>
</ul>


<p>A good idea for language design.</p>

<h1>&ldquo;SQL injection&rdquo;</h1>

<p>A rather <em>old</em> topic, yet still very relevent.</p>

<p>On the surface, this is about escaping syntax tricks. What&rsquo;s more fundamental is, the question
of what is data and what is code. Code and Data are represented by the same 1 and 0&rsquo;s and transferred
all the same. The point of interpretation, or execution, is critical for avoiding unintended (or
ill-intended) treating data as code. This is the root of all priviledge stealing in systems by design.</p>

<p>Of course hackers can still hack accounts and passwords by brute-force guessing or social means. But treating
data as code is <em>the</em> technical vulnerability to fight in all sorts of systems, be it SQL, shell codes, overflows etc.
The idea is to let the machine <em>run MY code</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 16]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/30/ror-day-16/"/>
    <updated>2013-11-30T23:28:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/30/ror-day-16</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Finish first review process</li>
<li>Dig deeper into Active Records</li>
<li>Page 294/476</li>
</ul>


<h1>&ldquo;DRY: Don&rsquo;t Repeat Yourself&rdquo;</h1>

<p>In a sense, the database table/row/column has much resonance with
the OO&rsquo;s class/object/attribute. The dimensions are very similiar.</p>

<p>This is repitition to the humans.However, to the machines and the different
systems, it&rsquo;s more like saying more or less the same thing in two
langauges. Translation is in order. But since this is defined so
formally in computer languages, can&rsquo;t that be easily translated by
machines themselves?</p>

<p>Well, Active Record is all about the automatic translations. There
are rules about names translation, and operations translations, defined
by humans. Once the rules are in place, the human repetitions can stop.
Naming things is hard, except when you can fixiate on some convention
predefined. Everybody just have to agree on the conventions.</p>

<p>We are like dealing with very intricate stuff in a small kingdom of computer
models and objects and databases and what have you. We can&rsquo;t keep
debating about the names of common things like streets and roads. That
has to be fixed to let us communicate effectively, so we can navigate
without losing the way.</p>

<p>Rails is such fixation. We express one thing, Rails knows the other.
There are exceptions when we want to keep things <em>irregular</em>, Rails allows
that can let us put our exceptions in the system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 15]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/29/ror-day-15/"/>
    <updated>2013-11-29T22:03:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/29/ror-day-15</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Review</li>
<li>Fix tests</li>
<li>Setup a production environment</li>
</ul>


<h1>&ldquo;Production&rdquo;</h1>

<p>Prototype and production are different. The gap may seem complex
but it really shouldn&rsquo;t be. The stuff makes a good prototype should
have good benefits on the production-type also. But then comes the
question of why the gap.</p>

<p>I&rsquo;ve talked about <a href="http://voidstart.com/blog/2013/11/25/ror-day-11/">Production Qualified</a> before,
about the differences in existence. Now I wonder why one system cannot take the upsides of both.</p>

<p>There really is no reason that a prototype shouldn&rsquo;t be stable and performant. The real problem
is simplicity. Production systems are complex, especially for large scale. It takes extra logic
to optimize/enhance for different situations, such as millions of concurrent users or bad 3G network.
Security risks are high, storage loads are high and data is much more important that can never be
lost. Logging is going to handle both the load and safisticated enough for deep analysis, even
for graphing and data mining purposes.</p>

<p>Why cannot all these be some kind of plugins that could be easily enabled by installation with
a package manager. If the structure is well thought of to enable such reliable extension, there
really should be no reason of why it can&rsquo;t be done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 14]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/28/ror-day-14/"/>
    <updated>2013-11-28T21:58:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/28/ror-day-14</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Practice the Playtime tasks</li>
<li>286/476</li>
</ul>


<h1>&ldquo;Playtime&rdquo;</h1>

<p>Following the book to write the app is straightforward, since everything
is detailed explained.</p>

<p>Playtime is the section without the answers explained, but only the questions given.
I had struggled with some of the questions for quite some time.</p>

<p>So far I have done all the playtime by myself and many of the errors I made are
caused by misunderstanding and carelessness. Through Googling and re-examining
the source codes, eventually the issue will settle.</p>

<p>The hard part about development is sometimes the error message just does not make
sense, you have to apply intuition, play and compare and ask good questions. This
is ultimately about the gap between computer and human, imagine if computer can
figure out all the underlying issues of why something does not work and print
the exact issue right in front of you. Everything is just like cooking recipe, even the error
printed, designed by human. The logic paths are thought first by a human, then coded
into recipes for the execution loop.</p>

<p>Perhaps I should look at machine learning courses for some inspirations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 13]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/27/ror-day-13/"/>
    <updated>2013-11-27T23:04:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/27/ror-day-13</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Continue Review</li>
<li>268/476</li>
</ul>


<h1>&ldquo;Ajax, Javascript, Css&rdquo;</h1>

<p>This is not something much about Ruby or Rails, just web dev
in general.</p>

<p>Ajax allows interaction without page reload. A request still happens
in the background, but only partical page is obtained. DOM tree largely
remains the same, but part of the tree got replaced.</p>

<p>Javascript is the language used to manipulate the DOM tree, and such
code sources need to be adaptive to content, too. Thus, we could again
use Ruby to generate JS code from templates, just like html pages.
We ends up with: use ruby to do js, use js to do html, use html to do page.
Just an amazing stack.</p>

<p>Css is the language to do styling via several things:</p>

<ul>
<li>Identify some elements in the DOM (via class, id)</li>
<li>Describe the style of that element (font,color,size,margin..)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 12]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/26/ror-day-12/"/>
    <updated>2013-11-26T20:46:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/26/ror-day-12</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Review what I have learn (Retrospective)</li>
<li>268/476</li>
</ul>


<h1>&ldquo;Retrospective&rdquo;</h1>

<p>In retrospect, there are several things that are quite fresh to me.</p>

<ul>
<li>MVC thinking</li>
<li>Template transformation ( erb &ndash;> html, js &hellip; )</li>
<li>Ruby block</li>
<li>Pervasive conventions over configuration</li>
<li>Request and State</li>
</ul>


<p>MVC makes the parts of the app easily separated, easy to find what
goes where and reason about.</p>

<p>Transformations from embedded ruby
to other sources are the bridge to generate web pages according to
states, including db and user interactions.</p>

<p>Ruby block shows first order functions, and provides a new way of
thinking about code and behavior. We can pass behaviors around and attach
to another behavior or data.</p>

<p>Conventions make a lot things easier. A lot of hard questions are not
about figuring out how to do, but just choose something, like naming
things and putting things somewhere. Conventions make those no brainers.</p>

<p>Request and state is particular for web development. The server and client
communicates by requests one at a time. To pass on the conversation across
requests, state must be maintained.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 11]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/25/ror-day-11/"/>
    <updated>2013-11-25T20:59:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/25/ror-day-11</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Deployment</li>
<li>264/476</li>
</ul>


<h1>&ldquo;Production qualified&rdquo;</h1>

<p>There seems to be always a need to make the testing
environment as simple as possible, for the benefit of quick looping
in experimentation. For real world, however, the priority has changed.
The performance becomes first order, and changes are slow.</p>

<p>The root reason being stability and speed. For any product, it is important to maintain the balance
between delivering a stable, dependenable expectations, and the need
for new functions.</p>

<p>Take it further, it&rsquo;s the difference of existing function and wanted function that matter. If the
need for new/better function outweighs the stability of existing ones, things need to go faster.</p>

<p>In Linux, there&rsquo;s the rule of never break the user&rsquo;s code, respect total backwards compatibility.
Only after years of obsoletion a supported feature could be deleted. Even so, such old products
could still go the history museums.</p>

<p>In today&rsquo;s fast-food world, it becomes rarity to be something that lasts decades. Standing the
test of time is such a beautiful property in modern times.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 10]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/24/ror-day-10/"/>
    <updated>2013-11-24T21:12:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/24/ror-day-10</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>I18N</li>
<li>244/476</li>
</ul>


<h1>&ldquo;Internationalization&rdquo;</h1>

<p>Essentially, every string is a fixed value that is
like enum. However, since texts are so easy to just
type out, people tend to just write them out, rather
than defining any enumeration.</p>

<p>Eventually the solution is to use something like tagging,
which is some function to return a translated version
based on locale.</p>

<p>This is kind of a unique case where a certain special
string literal markings can be useful. In C++ world, there&rsquo;s
a proposal for 2014 which adds physics units to the string
literal, enabling interpretations of physics units at the
compiler level. That could be a great inspiration for i18n.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 9]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/23/ror-day-9/"/>
    <updated>2013-11-23T21:59:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/23/ror-day-9</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Email</li>
<li>Login</li>
<li>Page 207/476</li>
</ul>


<h1>&ldquo;Ultimate communication: Email&rdquo;</h1>

<p>I remember somebody said that having emails is the final
stage of advancement of any program. The example being used
was Emacs. Any application complicated enough should at one
time thinking about supporting emails.</p>

<p>It&rsquo;s amazing that such an old technology still lives at the
edge of our modern lives. Nothing much about emails have
changed over time. Emails are truly classic, and truly a
basic component of our lives, like beds and wheels. Something
never dies.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 8]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/22/ror-day-8/"/>
    <updated>2013-11-22T19:32:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/22/ror-day-8</id>
    <content type="html"><![CDATA[<h1>Progess</h1>

<ul>
<li>CoffeeScript</li>
<li>Page 190/476</li>
</ul>


<h1>&ldquo;CoffeeScript&rdquo;</h1>

<p>It&rsquo;s amazing that people invent one language just to write
another language easier.</p>

<p>The simplest form is Macro languages, those just do short hand
substitutions. Advanced forms would invent its own simpler,
idomatic syntax, to map one structure to another. The advantages
they provide are usually: expressiveness (say more with less),
intuitive (fits people&rsquo;s mind).</p>

<p>Thinking about RoR in general and anything that tries to make
people express more easily, the general idea is the same. You
capture people&rsquo;s intuition, reduce repititions.</p>

<p>I think of RoR as providing a form, just like one of those you fill
at the immigration office. So that you don&rsquo;t have to do your own
composition writing. This is convenient, and enforces a certain level
of quality. The downside is it cuts into your imagination space.</p>

<p>The good thing is you get started and have an idea, then starting to
erase the form and draw your own image. :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 7]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/21/ror-day-7/"/>
    <updated>2013-11-21T20:33:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/21/ror-day-7</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Partial templates</li>
<li>Ajax</li>
<li>Page 163/476</li>
</ul>


<h1>&ldquo;Templates as methods&rdquo;</h1>

<p>It&rsquo;s a great idea, actually, more of a general idea.</p>

<p>Templates for web code are like methods that can be
reused, parameterized. This analogy can be extended
to many things, and I believe great things will come
out of it. Think of pictures as methods, videos as
methods. Designs, colors, quotes, that can have <em>API</em>,
can be auto-suggusted or auto-completed, with detailed
parameters. This can be fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 6]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/20/ror-day-6/"/>
    <updated>2013-11-20T14:36:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/20/ror-day-6</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Custom Db Migration</li>
<li>Custom Notice (Flash)</li>
<li>Handle Invalid request by redirection</li>
<li>Logger</li>
<li>Page 145/476</li>
</ul>


<h1>&ldquo;State of Request&rdquo;</h1>

<p>Between requests, special care should be done to
maintain state. The <em>flash</em> data structure is used,
so far most helpful in error notices.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 5]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/19/ror-day-5/"/>
    <updated>2013-11-19T20:43:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/19/ror-day-5</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>css,scss</li>
<li>layout (sidebar,banner)</li>
<li>functional tests</li>
<li>page 124/476</li>
</ul>


<h1>&ldquo;Functional Tests&rdquo;</h1>

<p>Running tests is like have some robot always
watching your back, which is nice.</p>

<p>The tests written for this demo project follow
such a pattern: add a feature first, then write
a test to ensure <em>some</em> of its behavior.</p>

<p>So far it&rsquo;s hard to imagine the way of writing
tests first, because what to test is yet to be
known.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 4]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/18/ror-day-4/"/>
    <updated>2013-11-18T14:59:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/18/ror-day-4</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>More ruby syntax (require,||, bang method, predicate method)</li>
<li>Depot app (pencil and paper design, db migrate/seed, sass, validation)</li>
<li>page 108/476</li>
</ul>


<h1>&ldquo;Scaffold&rdquo;</h1>

<p>This is not a new idea. MS word has &ldquo;template&rdquo; documents.
Things are given to solve a particular common problem, with minimal defaults, which
can be viewed as &ldquo;conventions&rdquo;.</p>

<p>Common tasks like add a controller, add a table, a field, where to put stylesheets,
where to put validation, where to put tests&hellip; All have a &ldquo;conventional&rdquo; answer.</p>

<p>Developers&#8217; needs are addressed to be easy to get started. Brilliant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR Day 3]]></title>
    <link href="http://voidstart.github.io/blog/2013/11/17/ror-day-3/"/>
    <updated>2013-11-17T23:43:00+08:00</updated>
    <id>http://voidstart.github.io/blog/2013/11/17/ror-day-3</id>
    <content type="html"><![CDATA[<h1>Progress</h1>

<ul>
<li>Object-Relational Mapping (ORM,Active Record)</li>
<li>Ruby Syntax (array,hash,block,exception,class,module,YAML)</li>
<li>page 70/476</li>
</ul>


<h1>&ldquo;First class function&rdquo;</h1>

<p>Block of codes can be passed to functions as <em>values</em>.
This is a powerful feature of the Ruby language.
The &ldquo;yield&rdquo; call is interesting.  For-loops can be
much different and this solves a lot of abstraction
issue with things like the &ldquo;visitor pattern&rdquo;.</p>

<p><em>Active Records</em> solves another issue with repetative
duplication logic with class objects and database
tables. They are very simular things in a way, but
are much different to access. Active Records is a
device for adapting the differences of access.</p>
]]></content>
  </entry>
  
</feed>
